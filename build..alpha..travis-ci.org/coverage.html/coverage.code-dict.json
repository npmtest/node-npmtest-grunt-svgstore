{"/home/travis/build/npmtest/node-npmtest-grunt-svgstore/test.js":"/* istanbul instrument in package npmtest_grunt_svgstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-svgstore/lib.npmtest_grunt_svgstore.js":"/* istanbul instrument in package npmtest_grunt_svgstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_svgstore = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_svgstore = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-svgstore/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-svgstore && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_svgstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_svgstore\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_svgstore.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_svgstore.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_svgstore.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_svgstore.__dirname + '/lib.npmtest_grunt_svgstore.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-svgstore/node_modules/grunt-svgstore/Gruntfile.js":"/*\n * grunt-svgstore\n * https://github.com/FWeinb/grunt-svgstore\n *\n * Copyright (c) 2014 Fabrice Weinberg\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar multiline = require('multiline');\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      },\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp']\n    },\n\n    // Configuration to be run (and then tested).\n    svgstore: {\n      defaults: {\n        options: {\n        },\n        files: {\n          'tmp/default_options.svg': ['test/fixtures/codepen.svg']\n        },\n      },\n\n      prefix: {\n        options: {\n          prefix: 'icon-'\n        },\n        files: {\n          'tmp/prefix.svg': ['test/fixtures/codepen.svg']\n        }\n      },\n\n      svgattr: {\n        options: {\n          svg: {\n            viewBox : '0 0 100 100'\n          }\n        },\n        files: {\n          'tmp/svg_attr.svg': ['test/fixtures/codepen.svg']\n        }\n      },\n\n      symbolattr: {\n        options:{\n          symbol: {\n            preserveAspectRatio: 'xMinYMin slice'\n          }\n        },\n        files: {\n          'tmp/symbol_attr.svg': ['test/fixtures/codepen.svg']\n        }\n      },\n\n      formatting: {\n        options: {\n          formatting : {\n            indent_size : 2\n          }\n        },\n        files: {\n          'tmp/formatting.svg': ['test/fixtures/codepen.svg']\n        },\n      },\n\n      withurlref: {\n        options:{},\n        files: {\n          'tmp/withurlref.svg': ['test/fixtures/element.svg']\n        }\n      },\n\n      nestedsymboleid: {\n        options:{},\n        files: {\n          'tmp/nestedsymbol.svg': ['test/fixtures/nestedsymbol.svg']\n        }\n      },\n\n      includedemo: {\n        options:{\n          includedemo : true\n        },\n        files: {\n          'tmp/includedemo.svg': ['test/fixtures/*.svg', 'test/fixtures/animation/anim.svg']\n        }\n      },\n\n      cutNameAfterFirstDot: {\n        options:{},\n        files: {\n          'tmp/cutnameafterfirstdot.svg': ['test/fixtures/naming/name.min.svg']\n        }\n      },\n\n      cleanup: {\n        options: {\n          cleanup: true\n        },\n        files: {\n          'tmp/cleanup.svg': ['test/fixtures/cleanup.svg']\n        }\n      },\n\n      cleanupwithcurrentcolor: {\n        options: {\n          cleanup: true\n        },\n        files: {\n          'tmp/cleanup_with_currentColor.svg': ['test/fixtures/cleanup_with_currentColor.svg']\n        }\n      },\n\n      preserveattribute: {\n        options: {\n          cleanup: ['fill', 'stroke', 'imafake']\n        },\n        files: {\n          'tmp/preserve_attribute.svg': ['test/fixtures/preserve_attribute.svg']\n        }\n      },\n      cleanupwithinheritviewbox: {\n        options: {\n          cleanup: true,\n          inheritviewbox: true\n        },\n        files: {\n          'tmp/cleanup_with_inheritviewbox.svg': ['test/fixtures/cleanup.svg']\n        }\n      },\n\n      removeunreferencedids: {\n        options: {\n          cleanup: ['style', 'id'],\n          cleanupdefs: true\n        },\n        files: {\n          'tmp/no_unref_ids.svg': ['test/fixtures/usingdef.svg']\n        }\n      },\n\n      cleanupfill: {\n        options: {\n          cleanup: ['fill']\n        },\n        files: {\n          'tmp/cleanup_fill.svg': ['test/fixtures/dribbble.svg']\n        }\n      },\n\n      nocleandefs: {\n        options: {\n          cleanup: ['style']\n        },\n        files: {\n          'tmp/defs_noclean.svg': ['test/fixtures/usingdef.svg']\n        }\n      },\n\n      cleandefs: {\n        options: {\n          cleanup: ['style', 'id'],\n          cleanupdefs: true\n        },\n        files: {\n          'tmp/defs_clean.svg': ['test/fixtures/usingdef.svg']\n        }\n      },\n\n      removeemptyg: {\n        options: {\n          cleanup: ['id']\n        },\n        files: {\n          'tmp/no_empty_g.svg': ['test/fixtures/scissors.svg']\n        }\n      },\n\n      perserveAnimation: {\n        files: {\n          'tmp/anim.svg': ['test/fixtures/animation/anim.svg']\n        }\n      },\n\n      withCustomTemplate:{\n        options: {\n          includedemo : multiline.stripIndent(function(){/*\n                <!doctype html>\n                <html>\n                  <head>\n                    <style>\n                      svg{\n                       width:50px;\n                       height:50px;\n                       fill:black !important;\n                      }\n                    </style>\n                  <head>\n                  <body>\n                    {{{svg}}}\n\n                    {{#each icons}}\n                    <div>\n                      <svg>\n                        <use xlink:href=\"#{{name}}\" />\n                      </svg>\n                      <div>{{title}}</div>\n                    </div>\n                    {{/each}}\n\n                  </body>\n                </html>\n          */})\n        },\n        files: {\n          'tmp/customTemplate.svg': ['test/fixtures/animation/anim.svg']\n        }\n      },\n\n      withCustomTemplateFunction: {\n        options: {\n          includedemo : function(){}\n        },\n        files: {\n          'tmp/customTemplateFunction.svg': ['test/fixtures/animation/anim.svg']\n        }\n      },\n\n      withCustomIdFunction: {\n        options: {\n          convertNameToId: function(name) {\n            return name.split('_')[1];\n          }\n        },\n        files: {\n          'tmp/customIdFunction.svg': ['test/fixtures/naming/SomePrefix_iconName.svg']\n        }\n      },\n\n      withCustomDefs: {\n        options: {\n          externalDefs: 'test/fixtures/usingdef.svg'\n        },\n        files: {\n          'tmp/withCustomDefs.svg': ['test/fixtures/itunes.svg']\n        }\n      },\n\n      noTitleElement: {\n        options: {\n          includeTitleElement: false\n        },\n        files: {\n          'tmp/no_title_element.svg': ['test/fixtures/codepen.svg']\n        }\n      },\n\n      noDescElement: {\n        options: {\n          preserveDescElement: false\n        },\n        files: {\n          'tmp/no_desc_element.svg': ['test/fixtures/codepen.svg']\n        }\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js']\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'svgstore', 'nodeunit']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-svgstore/node_modules/grunt-svgstore/tasks/svgstore.js":"/*\n * grunt-svgstore\n * https://github.com/FWeinb/grunt-svgstore\n *\n * Copyright (c) 2014 Fabrice Weinberg\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function (grunt) {\n  var crypto = require('crypto');\n  var multiline = require('multiline');\n  var path = require('path');\n\n  var beautify = require('js-beautify').html;\n  var cheerio = require('cheerio');\n  var chalk = require('chalk');\n  var handlebars = require('handlebars');\n\n  // Matching an url() reference. To correct references broken by making ids unique to the source svg\n  var urlPattern = /url\\(\\s*#([^ ]+?)\\s*\\)/g;\n\n  // Default Template\n  var defaultTemplate = multiline.stripIndent(function () { /*\n    <!doctype html>\n    <html>\n      <head>\n        <style>\n          svg{\n           width:50px;\n           height:50px;\n           fill:black !important;\n          }\n        </style>\n      <head>\n      <body>\n        {{{svg}}}\n\n        {{#each icons}}\n            <svg>\n              <use xlink:href=\"#{{name}}\" />\n            </svg>\n        {{/each}}\n\n      </body>\n    </html>\n  */});\n\n  // Default function used to extract an id from a name\n  var defaultConvertNameToId = function(name) {\n    var dotPos = name.indexOf('.');\n    if ( dotPos > -1){\n      name = name.substring(0, dotPos);\n    }\n    return name;\n  };\n\n  // Please see the Grunt documentation for more information regarding task\n  // creation: http://gruntjs.com/creating-tasks\n\n  grunt.registerMultiTask('svgstore', 'Merge SVGs from a folder.', function () {\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      prefix: '',\n      svg: {\n          'xmlns': \"http://www.w3.org/2000/svg\"\n      },\n      symbol: {},\n      formatting: false,\n      includedemo: false,\n      inheritviewbox: false,\n      cleanupdefs: false,\n      convertNameToId: defaultConvertNameToId,\n      fixedSizeVersion: false,\n      externalDefs: false,\n      includeTitleElement: true,\n      preserveDescElement: true\n    });\n\n    var cleanupAttributes = [];\n    if (options.cleanup && typeof options.cleanup === 'boolean') {\n      // For backwards compatibility (introduced in 0.2.6).\n      cleanupAttributes = ['style'];\n    } else if (Array.isArray(options.cleanup)){\n      cleanupAttributes = options.cleanup;\n    }\n\n    this.files.forEach(function (file) {\n      var $resultDocument = cheerio.load('<svg><defs></defs></svg>', { xmlMode: true }),\n          $resultSvg = $resultDocument('svg'),\n          $resultDefs = $resultDocument('defs').first(),\n          iconNameViewBoxArray = [];  // Used to store information of all icons that are added\n                                      // { name : '' }\n\n      // Merge in SVG attributes from option\n      for (var attr in options.svg) {\n        $resultSvg.attr(attr, options.svg[attr]);\n      }\n\n      file.src.filter(function (filepath) {\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.warn('File \"' + filepath + '\" not found.');\n          return false;\n        } else {\n          return true;\n        }\n      }).map(function (filepath) {\n        var filename = path.basename(filepath, '.svg');\n        var id = options.convertNameToId(filename);\n        var contentStr = grunt.file.read(filepath);\n        var $ = cheerio.load(contentStr, {\n              normalizeWhitespace: true,\n              xmlMode: true\n            });\n\n        // Remove empty g elements\n        $('g').each(function(){\n          var $elem = $(this);\n          if (!$elem.children().length) {\n            $elem.remove();\n          }\n        });\n\n        // Map to store references from id to uniqueId + id;\n        var mappedIds = {};\n\n        function getUniqueId(oldId) {\n          return id + \"-\" + oldId;\n        }\n\n        $('[id]').each(function () {\n          var $elem = $(this);\n          var id = $elem.attr('id');\n          var uid = getUniqueId(id);\n          mappedIds[id] = {\n            id : uid,\n            referenced : false,\n            $elem : $elem\n          };\n          $elem.attr('id', uid);\n        });\n\n        $('*').each(function () {\n          var $elem = $(this);\n          var attrs = $elem.attr();\n\n          Object.keys(attrs).forEach(function (key) {\n            var value = attrs[key];\n            var id, match, isFillCurrentColor, isStrokeCurrentColor, preservedKey = '';\n\n            while ( (match = urlPattern.exec(value)) !== null){\n              id = match[1];\n              if (!!mappedIds[id]) {\n                mappedIds[id].referenced = true;\n                $elem.attr(key, value.replace(match[0], 'url(#' + mappedIds[id].id + ')'));\n              }\n            }\n\n            if ( key === 'xlink:href' ) {\n              id = value.substring(1);\n              var idObj = mappedIds[id];\n              if (!!idObj){\n                idObj.referenced = false;\n                $elem.attr(key, '#' + idObj.id);\n              }\n            }\n\n            // IDs are handled separately\n            if (key !== 'id') {\n\n              if (options.cleanupdefs || !$elem.parents('defs').length) {\n\n                if (key.match(/preserve--/)) {\n                  //Strip off the preserve--\n                  preservedKey = key.substring(10);\n                }\n\n                if (cleanupAttributes.indexOf(key) > -1 || cleanupAttributes.indexOf(preservedKey) > -1){\n\n                  isFillCurrentColor = key === 'fill' && $elem.attr('fill') === 'currentColor';\n                  isStrokeCurrentColor = key === 'stroke' && $elem.attr('stroke') === 'currentColor';\n\n                  if (preservedKey && preservedKey.length) {\n                    //Add the new key preserving value\n                    $elem.attr(preservedKey, $elem.attr(key));\n\n                    //Remove the old preserve--foo key\n                    $elem.removeAttr(key);\n                  }\n                  else if (!(isFillCurrentColor || isStrokeCurrentColor)) {\n                    // Letting fill inherit the `currentColor` allows shared inline defs to\n                    // be styled differently based on an SVG element's `color` so we leave these\n                    $elem.removeAttr(key);\n                  }\n                } else {\n                  if (preservedKey && preservedKey.length) {\n                    //Add the new key preserving value\n                    $elem.attr(preservedKey, $elem.attr(key));\n\n                    //Remove the old preserve--foo key\n                    $elem.removeAttr(key);\n                  }\n                }\n              }\n            }\n          });\n        });\n\n        if ( cleanupAttributes.indexOf('id') > -1 ) {\n          Object.keys(mappedIds).forEach(function(id){\n            var idObj = mappedIds[id];\n            if (!idObj.referenced){\n               idObj.$elem.removeAttr('id');\n            }\n         });\n        }\n\n        var $svg = $('svg');\n        var $title = $('title');\n        var $desc = $('desc');\n        var $def = $('defs').first();\n        var defContent = $def.length && $def.html();\n\n        // Merge in the defs from this svg in the result defs block\n        if (defContent) {\n          $resultDefs.append(defContent);\n        }\n\n        var title = $title.first().html();\n        var desc = $desc.first().html();\n\n        // Remove def, title, desc from this svg\n        $def.remove();\n        $title.remove();\n        $desc.remove();\n\n        // If there is no title use the filename\n        title = title || id;\n\n        // Generate symbol\n        var $res = cheerio.load('<symbol>' + $svg.html() + '</symbol>', { xmlMode: true });\n        var $symbol = $res('symbol').first();\n\n        // Merge in symbol attributes from option\n        for (var attr in options.symbol) {\n          $symbol.attr(attr, options.symbol[attr]);\n        }\n\n        // Add title and desc (if provided)\n        if (desc && options.preserveDescElement) {\n          $symbol.prepend('<desc>' + desc + '</desc>');\n        }\n\n        if (title && options.includeTitleElement) {\n          $symbol.prepend('<title>' + title + '</title>');\n        }\n\n        // Add viewBox (if present on SVG w/ optional width/height fallback)\n        var viewBox = $svg.attr('viewBox');\n\n        if (!viewBox && options.inheritviewbox) {\n          var width = $svg.attr('width');\n          var height = $svg.attr('height');\n          var pxSize = /^\\d+(\\.\\d+)?(px)?$/;\n          if (pxSize.test(width) && pxSize.test(height)) {\n            viewBox = '0 0 ' + parseFloat(width) + ' ' + parseFloat(height);\n          }\n        }\n\n        if (viewBox) {\n          $symbol.attr('viewBox', viewBox);\n        }\n\n        // Add ID to symbol\n        var graphicId = options.prefix + id;\n        $symbol.attr('id', graphicId);\n\n        // Extract gradients and pattern\n        var addToDefs = function(){\n          var $elem = $res(this);\n          $resultDefs.append($elem.toString());\n          $elem.remove();\n        };\n\n        $res('linearGradient').each(addToDefs);\n        $res('radialGradient').each(addToDefs);\n        $res('pattern').each(addToDefs);\n\n        // Append <symbol> to resulting SVG\n        $resultSvg.append($res.html());\n\n        // Add icon to the demo.html array\n        if (!!options.includedemo) {\n          iconNameViewBoxArray.push({\n            name: graphicId,\n            title: title\n          });\n        }\n\n        if (viewBox && !!options.fixedSizeVersion) {\n          var fixedWidth = options.fixedSizeVersion.width || 50;\n          var fixedHeight = options.fixedSizeVersion.width || 50;\n          var $resFixed = cheerio.load('<symbol><use></use></symbol>', { lowerCaseAttributeNames: false });\n          var fixedId = graphicId + (options.fixedSizeVersion.suffix || '-fixed-size');\n          var $symbolFixed = $resFixed('symbol')\n            .first()\n            .attr('viewBox', [0, 0, fixedWidth, fixedHeight].join(' '))\n            .attr('id', fixedId);\n          Object.keys(options.symbol).forEach(function (key) {\n            $symbolFixed.attr(key, options.symbol[key]);\n          });\n          if (desc) {\n            $symbolFixed.prepend('<desc>' + desc + '</desc>');\n          }\n          if (title) {\n            $symbolFixed.prepend('<title>' + title + '</title>');\n          }\n          var originalViewBox = viewBox\n            .split(' ')\n            .map(function (string) {\n              return parseInt(string);\n            });\n\n          var translationX = ((fixedWidth - originalViewBox[2]) / 2) + originalViewBox[0];\n          var translationY = ((fixedHeight - originalViewBox[3]) / 2) + originalViewBox[1];\n          var scale = Math.max.apply(null, [originalViewBox[2], originalViewBox[3]]) /\n            Math.max.apply(null, [fixedWidth, fixedHeight]);\n\n          $symbolFixed\n            .find('use')\n            .attr('xlink:href', '#' + fixedId)\n            .attr('transform', [\n              'scale(' + parseFloat(scale.toFixed(options.fixedSizeVersion.maxDigits.scale || 4)).toPrecision() + ')',\n              'translate(' + [\n                parseFloat(translationX.toFixed(options.fixedSizeVersion.maxDigits.translation || 4)).toPrecision(),\n                parseFloat(translationY.toFixed(options.fixedSizeVersion.maxDigits.translation || 4)).toPrecision()\n              ].join(', ') + ')'\n            ].join(' '));\n\n          $resultSvg.append($resFixed.html());\n          if (options.includedemo) {\n            iconNameViewBoxArray.push({\n              name: fixedId\n            });\n          }\n        }\n      });\n\n      if(options.externalDefs) {\n        var filepath = options.externalDefs;\n\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.error('File \"' + chalk.red(filepath) + '\" not found.');\n          return false;\n        }\n\n        var $file = cheerio.load(grunt.file.read(filepath), {\n              xmlMode: true,\n              normalizeWhitespace: true\n            }),\n            defs = $file('defs').html();\n\n        if (defs === null) {\n          grunt.log.warn('File \"' + chalk.yellow(filepath) + '\" contains no defs.');\n        } else {\n          $resultDefs.append(defs);\n        }\n      }\n\n      // Remove defs block if empty\n      if ( $resultDefs.html().trim() === '' ) {\n        $resultDefs.remove();\n      }\n\n      var result = options.formatting ? beautify($resultDocument.html(), options.formatting) : $resultDocument.html();\n      var destName = path.basename(file.dest, '.svg');\n\n      grunt.file.write(file.dest, result);\n\n      grunt.log.writeln('File ' + chalk.cyan(file.dest) + ' created.');\n\n      if (!!options.includedemo) {\n        $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;');\n\n        var demoHTML;\n        var viewData = {\n          svg : $resultDocument.html(),\n          icons : iconNameViewBoxArray\n        };\n\n        if (typeof options.includedemo === 'function'){\n          demoHTML = options.includedemo(viewData);\n        } else{\n          var template = defaultTemplate;\n          if (typeof options.includedemo === 'string'){\n            template = options.includedemo;\n          }\n          demoHTML = handlebars.compile(template)(viewData);\n        }\n\n        var demoPath = path.resolve(path.dirname(file.dest), destName + '-demo.html');\n        grunt.file.write(demoPath, demoHTML);\n        grunt.log.writeln('Demo file ' + chalk.cyan(demoPath) + ' created.');\n      }\n    });\n  });\n};\n"}